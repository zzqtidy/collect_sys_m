<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

    <!-- 注册本地调度任务
    <bean id="localQuartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean"></bean>-->

    <!-- 注册集群调度任务 -->
    <!--
        解惑：
        以下这种方式是通过 FactoryBean 配置 Bean，一般常用于集成第三方框架的时候使用（第三方框架有些采用这种形式）
        class 指向的是FactoryBean的全类名
        property 配置的是FactoryBean的属性

        而实际上这里返回的是FactoryBean中的getObject()方法返回的实例，如下面SchedulerFactoryBean中的部分代码
        private Scheduler scheduler;
        public Scheduler getObject() {
            return this.scheduler;
        }
    -->

    <bean name="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
          <!--lazy-init="true" -->
          <!--destroy-method="destroy"-->

        <!--<property name="dataSource">-->
            <!--<ref bean="dataSource"/>-->
        <!--</property>-->
        <!--&lt;!&ndash;可选，QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了 &ndash;&gt;-->
        <!--<property name="overwriteExistingJobs" value="true" />-->
        <!--&lt;!&ndash;必须的，QuartzScheduler 延时启动，应用启动完后 QuartzScheduler 再启动 &ndash;&gt;-->
        <!--<property name="startupDelay" value="3" />-->
        <!--&lt;!&ndash; 设置自动启动 &ndash;&gt;-->
        <!--<property name="autoStartup" value="true" />-->
        <!--<property name="applicationContextSchedulerContextKey" value="applicationContext" />-->
        <!--&lt;!&ndash;读取quartz.properties文件中配置的信息并加载&ndash;&gt;-->
        <!--<property name="configLocation" value="classpath:quartz.properties" />-->
    </bean>

</beans>