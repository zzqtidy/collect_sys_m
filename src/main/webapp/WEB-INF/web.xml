<?xml version="1.0" encoding="UTF-8"?>
<!-- Intellj Idea 默认创建的是sevlet 2.3的版本，该版本jsp的el表达式默认是不工作的,需要修改成3.1的版本-->
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1"
         metadata-complete="true">
    <!--配置DispatcherServlet(配置springmvc servlet)，可以配置多个，如电脑端访问和手机端（云端）访问各一个-->
    <servlet>
        <servlet-name>csm-dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--配置需要加载的配置文件
        整合的顺序 mybatis -> spring -> springmvc
        如果不特意指定参数名为contextConfigLoction的<context-parameter>元素，
        那么spring的ContextLoderListener监听器就会在/WEB-INF/下去
        寻找并加载该目录下的名为csm-dispatcher-servlet.xml这个文件
        -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:/spring/spring-mvc.xml</param-value>
        </init-param>
    </servlet>
    <!--上面的配置映射哪些请求，此处用/来匹配所有请求，主要是兼顾RESTful请求url-->
    <servlet-mapping>
        <servlet-name>csm-dispatcher</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!-- 配置Spring容器监听器,集成shiro必须要ContextLoaderListener-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring/spring-context-*.xml</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- 字符集过滤器 解决的只是post请求中的中文乱码-->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- shiro的filter -->
    <!-- shiro过滤器，DelegatingFilterProxy通过代理模式将Spring容器中的bean和filter关联起来 -->
    <filter>
        <filter-name>shiroFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <!-- 设置targetFilterLifecycle为true 由servlet控制filter生命周期 -->
        <init-param>
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
        <!-- 设置Spring容器filter的bean id，如果不设置则在Spring注册的bean中查找与filter-name一致的bean -->
        <init-param>
            <param-name>targetBeanName</param-name>
            <param-value>shiroFilter</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>shiroFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--sitemesh3的拦截器-->
    <filter>
        <filter-name>sitemesh</filter-name>
        <filter-class>org.sitemesh.config.ConfigurableSiteMeshFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>sitemesh</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--配置thymeleaf一定要加这个 否则404错误无法传到Controller -->
    <servlet-mapping>
        <servlet-name>csm-dispatcher</servlet-name>
        <url-pattern>*.html</url-pattern>
    </servlet-mapping>
    <!--定义404错误，如果找不到页面会用改页面来代替，而不是在界面上展示一堆不美观的错误码-->
    <!--<error-page>-->
        <!--<error-code>404</error-code>-->
        <!--<location>/WEB-INF/jquerypages/error/404.html</location>-->
    <!--</error-page>-->
</web-app>